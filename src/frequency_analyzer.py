"""
Main FrequencyAnalyzer class for detecting network layer anomalies
through audio and radio frequency analysis.
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional
from .data_loader import DataLoader
from .signal_processor import SignalProcessor
from .layer_detector import LayerDetector
from .visualizer import Visualizer


class FrequencyAnalyzer:
    """
    Main analyzer class for detecting leakage and obscured layers
    in layered networks using frequency analysis.
    """
    
    def __init__(self, resolution_hz: float = 1.0):
        """
        Initialize the frequency analyzer.
        
        Args:
            resolution_hz (float): Frequency resolution in Hz (default: 1.0)
        """
        self.resolution_hz = resolution_hz
        self.data_loader = DataLoader()
        self.signal_processor = SignalProcessor(resolution_hz)
        self.layer_detector = LayerDetector()
        self.visualizer = Visualizer()
        
        # Storage for frequency data
        self.audio_data: Optional[pd.DataFrame] = None
        self.radio_data: Optional[pd.DataFrame] = None
        self.combined_data: Optional[pd.DataFrame] = None
        
    def load_audio_frequencies(self, file_path: str) -> None:
        """
        Load audio frequency data from file.
        
        Args:
            file_path (str): Path to audio frequency data file
        """
        self.audio_data = self.data_loader.load_frequency_data(
            file_path, data_type='audio'
        )
        print(f"Loaded {len(self.audio_data)} audio frequency samples")
        
    def load_radio_frequencies(self, file_path: str) -> None:
        """
        Load radio frequency data from file.
        
        Args:
            file_path (str): Path to radio frequency data file
        """
        self.radio_data = self.data_loader.load_frequency_data(
            file_path, data_type='radio'
        )
        print(f"Loaded {len(self.radio_data)} radio frequency samples")
        
    def combine_frequency_data(self) -> pd.DataFrame:
        """
        Combine audio and radio frequency data for analysis.
        
        Returns:
            pd.DataFrame: Combined frequency dataset
        """
        if self.audio_data is None or self.radio_data is None:
            raise ValueError("Both audio and radio data must be loaded first")
            
        self.combined_data = self.signal_processor.combine_frequencies(
            self.audio_data, self.radio_data
        )
        
        return self.combined_data
        
    def detect_layer_anomalies(self) -> Dict:
        """
        Detect leakage and obscured layers in the network.
        
        Returns:
            Dict: Analysis results containing detected anomalies
        """
        if self.combined_data is None:
            self.combine_frequency_data()
            
        # Preprocess the combined frequency data
        processed_data = self.signal_processor.preprocess_signals(
            self.combined_data
        )
        
        # Detect anomalies using various methods
        results = {
            'leakage_points': self.layer_detector.detect_leakage(processed_data),
            'obscured_layers': self.layer_detector.detect_obscured_layers(processed_data),
            'frequency_correlations': self.layer_detector.analyze_correlations(processed_data),
            'network_topology': self.layer_detector.infer_topology(processed_data),
            'anomaly_score': self.layer_detector.calculate_anomaly_score(processed_data)
        }
        
        return results
        
    def generate_report(self, results: Dict, output_path: str = None) -> None:
        """
        Generate comprehensive analysis report.
        
        Args:
            results (Dict): Analysis results from detect_layer_anomalies()
            output_path (str, optional): Path to save report
        """
        # Generate text report (skip visualizations for now to avoid display issues)
        report = self._create_text_report(results)
        
        if output_path:
            with open(output_path, 'w') as f:
                f.write(report)
            print(f"Report saved to {output_path}")
        else:
            print(report)
            
        print("Note: Visualization plots can be generated by calling:")
        print("  visualizer.plot_frequency_spectrum(combined_data)")
        print("  visualizer.plot_layer_analysis(results)")
        print("  visualizer.plot_anomaly_heatmap(results['leakage_points'])")
            
    def _create_text_report(self, results: Dict) -> str:
        """
        Create formatted text report from analysis results.
        
        Args:
            results (Dict): Analysis results
            
        Returns:
            str: Formatted report text
        """
        report = []
        report.append("=" * 60)
        report.append("NETWORK FREQUENCY ANALYSIS REPORT")
        report.append("=" * 60)
        report.append("")
        
        # Summary statistics
        report.append("SUMMARY:")
        report.append(f"- Resolution: {self.resolution_hz} Hz")
        report.append(f"- Audio samples: {len(self.audio_data) if self.audio_data is not None else 0}")
        report.append(f"- Radio samples: {len(self.radio_data) if self.radio_data is not None else 0}")
        report.append(f"- Anomaly Score: {results['anomaly_score']:.3f}")
        report.append("")
        
        # Leakage detection
        leakage_count = len(results['leakage_points'])
        report.append(f"LEAKAGE DETECTION: {leakage_count} points detected")
        if leakage_count > 0:
            for i, point in enumerate(results['leakage_points'][:5]):  # Show top 5
                report.append(f"  {i+1}. Frequency: {point['frequency']:.1f} Hz, "
                            f"Strength: {point['strength']:.3f}")
        report.append("")
        
        # Obscured layers
        obscured_count = len(results['obscured_layers'])
        report.append(f"OBSCURED LAYERS: {obscured_count} layers detected")
        if obscured_count > 0:
            for i, layer in enumerate(results['obscured_layers'][:3]):  # Show top 3
                report.append(f"  {i+1}. Layer {layer['id']}: "
                            f"{layer['frequency_range'][0]:.1f}-{layer['frequency_range'][1]:.1f} Hz")
        report.append("")
        
        # Network topology insights
        topology = results['network_topology']
        report.append("NETWORK TOPOLOGY:")
        report.append(f"- Estimated layers: {topology.get('layer_count', 'Unknown')}")
        report.append(f"- Connectivity score: {topology.get('connectivity', 0):.3f}")
        report.append("")
        
        return "\n".join(report)
        
    def export_data(self, output_path: str, data_type: str = 'combined') -> None:
        """
        Export frequency data to file.
        
        Args:
            output_path (str): Output file path
            data_type (str): Type of data to export ('audio', 'radio', 'combined')
        """
        if data_type == 'audio' and self.audio_data is not None:
            self.audio_data.to_csv(output_path, index=False)
        elif data_type == 'radio' and self.radio_data is not None:
            self.radio_data.to_csv(output_path, index=False)
        elif data_type == 'combined' and self.combined_data is not None:
            self.combined_data.to_csv(output_path, index=False)
        else:
            raise ValueError(f"Invalid data_type or data not loaded: {data_type}")
            
        print(f"Data exported to {output_path}")
